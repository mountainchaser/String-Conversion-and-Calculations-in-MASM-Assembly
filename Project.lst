Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/02/21 22:52:44
2String Primitives and Macros    (Proj6_LANDAL.asm	     Page 1 - 1


				TITLE String Primitives and Macros    (Proj6_LANDAL.asm)

				; Author: Allison Land
				; Last Modified: 11/29/21
				; OSU email address: LANDAL@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 12/4/21
				; Description: This program uses macros to take decimal number inputs as strings, and then converts them to 
				;		decimal numbers....
				;-----------------------------------------------------------------------------------------------------

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; MACRO DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			mGetString
				; 
				; Desc:			Gets a string from the user and validates that it contains a valid integer that will 
				;				fit in a 32 bit register (11 characters total, including sign +/-)
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: progTitle (reference), programmer (reference), ec1 (reference), ec2 (reference),
				;			progDesc(reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

					mGetString		MACRO	stringAddress, bytesReadAddress, promptAddress

						;prompt user for string input, store using ReadString
						MOV		EDX, promptAddress
						CALL	WriteString

						MOV		EDX, stringAddress
						MOV		ECX, MAXBYTES
						CALL	ReadString
						MOV		[bytesReadAddress], EAX

					ENDM

					
				; ---------------------------------------------------------------------------------------------------
				; Name:			mDisplayString
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: progTitle (reference), programmer (reference), ec1 (reference), ec2 (reference),
				;			progDesc(reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

					mDisplayString	MACRO	stringAddress
						;print stored string using WriteString
						MOV		EDX, stringAddress
						CALL	WriteString
					ENDM

				;-----------------------------------------------------------------------------------------------------
					
					;CONSTANTS
 = 80000000				MINVALUE = 2147483648  ;negated in code
 = 00000039				MAXASCII = 57
 = 0000000C				MAXBYTES = 12
 = 0000000A				ARRAYELEMENTS = 10

 00000000			.data

 00000000 09 09 09 53 74		progTitle	BYTE	"			String Primitives and Macros in MASM Assembly",13,10,0
	   72 69 6E 67 20
	   50 72 69 6D 69
	   74 69 76 65 73
	   20 61 6E 64 20
	   4D 61 63 72 6F
	   73 20 69 6E 20
	   4D 41 53 4D 20
	   41 73 73 65 6D
	   62 6C 79 0D 0A
	   00
 00000033 09 09 09 09 09		programmer	BYTE	"					by Allison Land",13,10,13,10,0
	   62 79 20 41 6C
	   6C 69 73 6F 6E
	   20 4C 61 6E 64
	   0D 0A 0D 0A 00
 0000004C 54 68 69 73 20		instruction	BYTE	"This program requires that you enter ten integers between -2,147,483,648 and 2,147,483,647.",13,10,13,10,0
	   70 72 6F 67 72
	   61 6D 20 72 65
	   71 75 69 72 65
	   73 20 74 68 61
	   74 20 79 6F 75
	   20 65 6E 74 65
	   72 20 74 65 6E
	   20 69 6E 74 65
	   67 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 2D 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 38 20 61 6E
	   64 20 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   2E 0D 0A 0D 0A
	   00
 000000AC 50 6C 65 61 73		prompt		BYTE	"Please enter a number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000000C4 45 52 52 4F 52		error		BYTE	"ERROR: This is either not a valid number, or your integer has too many digits.",0
	   3A 20 54 68 69
	   73 20 69 73 20
	   65 69 74 68 65
	   72 20 6E 6F 74
	   20 61 20 76 61
	   6C 69 64 20 6E
	   75 6D 62 65 72
	   2C 20 6F 72 20
	   79 6F 75 72 20
	   69 6E 74 65 67
	   65 72 20 68 61
	   73 20 74 6F 6F
	   20 6D 61 6E 79
	   20 64 69 67 69
	   74 73 2E 00
 00000113 2A 2A 45 43 3A		ec1			BYTE	"**EC: Numbers each line of user input with running total of user's valid numbers using WriteVal.",13,10,13,10,0
	   20 4E 75 6D 62
	   65 72 73 20 65
	   61 63 68 20 6C
	   69 6E 65 20 6F
	   66 20 75 73 65
	   72 20 69 6E 70
	   75 74 20 77 69
	   74 68 20 72 75
	   6E 6E 69 6E 67
	   20 74 6F 74 61
	   6C 20 6F 66 20
	   75 73 65 72 27
	   73 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   20 75 73 69 6E
	   67 20 57 72 69
	   74 65 56 61 6C
	   2E 0D 0A 0D 0A
	   00
 00000178  0000000C [			ASCIIstring	BYTE	MAXBYTES DUP(?)
	    00
	   ]
 00000184 32 31 34 37 34		maxValue	BYTE	"2147483647",0
	   38 33 36 34 37
	   00
 0000018F  0000000A [			numArray	SDWORD	ARRAYELEMENTS DUP(?)
	    00000000
	   ]
 000001B7 00000001			arrayCount	SDWORD	1				
 000001BB 20 00				space		BYTE	" ",0
 000001BD 2C 20 00			comma		BYTE	", ",0
 000001C0 00000000			storedDec	SDWORD	?
 000001C4 00000000			bytesRead	SDWORD	?
 000001C8 00000000			numCount	SDWORD	0
 000001CC 00000000			boolie		SDWORD	0				; 0 = TRUE 1 = FALSE


 00000000			.code
 00000000			main PROC

					;INTRODUCTION
 00000000  BA 00000000 R		MOV		EDX, OFFSET progTitle
 00000005  E8 00000000 E		CALL	WriteString
 0000000A  BA 00000033 R		MOV		EDX, OFFSET programmer
 0000000F  E8 00000000 E		CALL	Writestring
 00000014  BA 00000113 R		MOV		EDX, OFFSET ec1
 00000019  E8 00000000 E		CALL	WriteString
 0000001E  BA 0000004C R		MOV		EDX, OFFSET instruction
 00000023  E8 00000000 E		CALL	WriteString


					;GET 10 VALID INTEGERS FROM USER
					;set up:
 00000028  BF 000001C0 R		MOV		EDI, OFFSET storedDec
 0000002D  BE 0000018F R		MOV		ESI, OFFSET numArray
 00000032  B9 0000000A			MOV		ECX, ARRAYELEMENTS
 00000037  BB 00000000			MOV		EBX, 0

 0000003C				_loop:
					;EXTRA CREDIT 1
 0000003C  68 000001B7 R		PUSH	OFFSET arrayCount
 00000041  68 00000178 R		PUSH	OFFSET ASCIIstring
 00000046  E8 0000014D			CALL	WriteVal
 0000004B  BA 000001BB R		MOV		EDX, OFFSET space
 00000050  E8 00000000 E		CALL	WriteString

 00000055  68 00000184 R		PUSH	OFFSET	maxValue
 0000005A  68 000000C4 R		PUSH	OFFSET error
 0000005F  68 000001C0 R		PUSH	OFFSET storedDec
 00000064  68 00000178 R		PUSH	OFFSET ASCIIstring
 00000069  68 000001C4 R		PUSH	OFFSET bytesRead
 0000006E  68 000000AC R		PUSH	OFFSET prompt
 00000073  E8 00000055			CALL	ReadVal
 00000078  E8 00000000 E		CALL	CrLF
 0000007D  8B 15 000001CC R		MOV		EDX, boolie
 00000083  83 FA 01			CMP		EDX, 1
 00000086  75 B4			JNE		_loop
 00000088  FF 05 000001B7 R		INC		arrayCount
 0000008E  BA 00000000			MOV		EDX, 0
 00000093  89 15 000001CC R		MOV		boolie, EDX

					;STORE IN ARRAY (using register indirect addressing)

 00000099  BE 000001C0 R		MOV		ESI, OFFSET storedDec	; num going into array
 0000009E  8B 16			MOV		EDX, [ESI]
 000000A0  89 93 0000018F R		MOV		numArray[EBX], EDX				; move value into array
 000000A6  83 C3 04			ADD		EBX, TYPE numArray					
 000000A9  E2 91			LOOP	_loop					; LOOP x's ARRAYSIZE

					;loop through array, display ints
 000000AB				_displayInts:
 000000AB  B9 0000000A			MOV		ECX, LENGTHOF numArray
 000000B0  BE 0000018F R		MOV		ESI, OFFSET numArray
 000000B5  E8 000000DE			CALL	WriteVal
 000000BA  BA 000001BD R		MOV		EDX, OFFSET comma
 000000BF  E8 00000000 E		CALL	WriteString
 000000C4  E2 E5			LOOP	_displayInts


					;calculate sum and display

					;calvulate average and display

					Invoke ExitProcess,0	; exit to operating system
 000000C6  6A 00	   *	    push   +000000000h
 000000C8  E8 00000000 E   *	    call   ExitProcess
 000000CD			main ENDP


				; PROCEDURE DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			ReadVal
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: OFFSET error, OFFSET storedDec, OFFSET ASCIIstring, OFFSET bytesRead, OFFSET prompt}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

 000000CD				readVal PROC	USES ECX EBX ESI EDI

					;invoke mGetString
 000000CD  51		   *	    push   ecx
 000000CE  53		   *	    push   ebx
 000000CF  56		   *	    push   esi
 000000D0  57		   *	    push   edi
 000000D1  55				PUSH	EBP
 000000D2  8B EC			MOV		EBP, ESP
					mGetString		[EBP + 32], [EBP + 28], [EBP + 24]  ;stringAddress, bytesReadAddress, promptAddress
 000000D4  8B 55 18	     1			MOV		EDX, [EBP + 24]
 000000D7  E8 00000000 E     1			CALL	WriteString
 000000DC  8B 55 20	     1			MOV		EDX, [EBP + 32]
 000000DF  B9 0000000C	     1			MOV		ECX, MAXBYTES
 000000E4  E8 00000000 E     1			CALL	ReadString
 000000E9  89 45 1C	     1			MOV		[[EBP + 28]], EAX

					; string primitive setup
 000000EC				_setup:
 000000EC  8B 55 1C			MOV		EDX, [EBP + 28]
 000000EF  8B CA			MOV		ECX, EDX				; bytesread
 000000F1  8B 75 20			MOV		ESI, [EBP + 32]			; input array ASCIIstring (from mGetString)
 000000F4  BF 00000000			MOV		EDI, 0					; for conversion algorithim
 000000F9  8B 55 2C			MOV		EDX, [EBP+44]			; track iteration through maxvalue chars

					;CHECK FOR SIGNS
 000000FC				_stringLoop:
 000000FC  33 C0			XOR		EAX, EAX
 000000FE  AC				LODSB	
 000000FF  3C 2D			CMP		AL, 45			; -
 00000101  74 57			JE		_skipSign
 00000103  3C 2B			CMP		AL, 43			; +
 00000105  74 53			JE		_skipSign
 00000107  3B 4D 1C			CMP		ECX, [EBP + 28]
 0000010A  75 0C			JNE		_signLength

					;VALIDATE LENGTH FIRST ITERATION
 0000010C  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE	; if more chars than maxvalue (no sign)
 0000010F  7F 4B			JG		_error
 00000111  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE
 00000114  74 0C			JE		_validateLoop
 00000116  EB 2F			JMP		_convert

 00000118				_signLength:
 00000118  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE
 0000011B  7F 3F			JG		_error	
 0000011D  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE
 00000120  7C 25			JL		_convert

 00000122				_validateLoop:
 00000122  8B 55 1C			MOV		EDX, [EBP+28]			;bytes read/ counter
 00000125  2B D1			SUB		EDX, ECX
 00000127  03 55 2C			ADD		EDX, [EBP + 44]
 0000012A  33 DB			XOR		EBX, EBX
 0000012C  8B DA			MOV		EBX, EDX
 0000012E  3B C3			CMP		EAX, EBX		
 00000130  7F 2A			JG		_error
 00000132  83 E8 30			SUB		EAX, 48							;convert ASCII to SDWORD
 00000135  6B FF 0A			IMUL	EDI, 10
 00000138  03 C3			ADD		EAX, EBX
 0000013A  8B F8			MOV		EDI, EAX
 0000013C  E2 BE			LOOP	_stringLoop	
 0000013E  8B 45 24			MOV		EAX, [EBP+36]
 00000141  89 38			MOV		[EAX], EDI
 00000143  E2 DD			LOOP	_validateLoop
 00000145  EB 1F			JMP		_validateNeg
					
 00000147				_convert:
 00000147  83 E8 30			SUB		EAX, 48							;convert ASCII to SDWORD
 0000014A  6B FF 0A			IMUL	EDI, 10
 0000014D  03 C3			ADD		EAX, EBX
 0000014F  8B F8			MOV		EDI, EAX
 00000151  E2 A9			LOOP	_stringLoop	
 00000153  8B 45 24			MOV		EAX, [EBP+36]
 00000156  89 38			MOV		[EAX], EDI
 00000158  EB 0C			JMP		_validateNeg

 0000015A				_skipSign:
 0000015A  EB BC			JMP		_signLength ; jump

 0000015C				_error:
 0000015C  8B 55 28			MOV		EDX, [EBP + 40]    
 0000015F  E8 00000000 E		CALL	WriteString
 00000164  EB 2C			JMP		_errorExit

					; NEGATE IF NEGATIVE
 00000166				_validateNeg:
 00000166  B9 00000001			MOV		ECX, 1	
 0000016B  8B 75 20			MOV		ESI, [EBP + 32]     ;input array ASCIIstring (from mGetString)
 0000016E  AC				LODSB
 0000016F  3C 2D			CMP		AL, 45				;check if first char is -
 00000171  75 0D			JNE		_exit
 00000173  8B 45 24			MOV		EAX, [EBP + 36]
 00000176  F7 D8			NEG		EAX
 00000178  3D 80000000			CMP		EAX, MINVALUE
 0000017D  75 01			JNE		_exit
 0000017F  40				INC		EAX		

 00000180				_exit:
 00000180  8B 55 30			MOV		EDX, [EBP + 48]
 00000183  42				INC		EDX
 00000184  89 55 30			MOV		[EBP + 48], EDX
 00000187  89 45 24			MOV		[EBP + 36], EAX		; output storedDec
 0000018A  BA 00000001			MOV		EDX, 1				; boolie return TRUE
 0000018F  89 55 2A			MOV		[EBP + 42], EDX
 00000192				_errorExit:
 00000192  5D				POP EBP
					RET 
 00000193  5F		   *	    pop    edi
 00000194  5E		   *	    pop    esi
 00000195  5B		   *	    pop    ebx
 00000196  59		   *	    pop    ecx
 00000197  C3		   *	    ret    00000h
 00000198				ReadVal ENDP

				; ---------------------------------------------------------------------------------------------------
				; Name:			WriteVal
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: string (reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------
					
 00000198				WriteVal PROC USES EAX EDX EBX ECX

 00000198  50		   *	    push   eax
 00000199  52		   *	    push   edx
 0000019A  53		   *	    push   ebx
 0000019B  51		   *	    push   ecx
 0000019C  55				PUSH	EBP
 0000019D  8B EC			MOV		EBP, ESP

 0000019F  BB 00000000			MOV		EBX, 0			;initialize digit count

					;convert SDWORD to ASCII
 000001A4				_loop:
					
 000001A4  8B 45 1C			MOV		EAX, [EBP + 28]			;move val SDWORD into EDX
 000001A7  8B 10			MOV		EDX, [EAX]
 000001A9  8B C2			MOV		EAX, EDX
					
 000001AB  99				CDQ
 000001AC  B9 0000000A			MOV		ECX, 10
 000001B1  F7 F9			IDIV	ECX
 000001B3  B9 00000000			MOV		ECX, 0
 000001B8  83 C2 30			ADD		EDX, 48					;else add 48 to remainder to convert to ASCII
 000001BB  8B 4C 1D 18			MOV		ECX, [EBP + 24 + EBX]
 000001BF  89 11			MOV		[ECX], EDX				;move into ASCIIstring
 000001C1  43				INC		EBX	
 000001C2  3B C1			CMP		EAX, ECX				;if quotient is 0, then last digit
 000001C4  7E 02			JLE		_displayString
 000001C6  EB DC			JMP		_loop
									

 000001C8				_lastDigit:
					;CMP		EDX, 0
					;JL		_negative
					;JMP		_displayString

					;_negative:
					;NEG		EDX
					;ADD		EDX, 48
					;MOV		[EBP + 8 + EBX], EDX
					;INC		EBX
					;MOV		[EBP + 8 + EBX], 45

					;invoke mDisplayString
 000001C8				_displayString:
					mDisplayString	[EBP+24]
 000001C8  8B 55 18	     1			MOV		EDX, [EBP+24]
 000001CB  E8 00000000 E     1			CALL	WriteString

 000001D0  5D				POP EBP

					RET
 000001D1  59		   *	    pop    ecx
 000001D2  5B		   *	    pop    ebx
 000001D3  5A		   *	    pop    edx
 000001D4  58		   *	    pop    eax
 000001D5  C3		   *	    ret    00000h
 000001D6				WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/02/21 22:52:44
2String Primitives and Macros    (Proj6_LANDAL.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001D0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001D6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000198 _TEXT	Length= 0000003E Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 000001A4 _TEXT	
  _lastDigit . . . . . . . . . .	L Near	 000001C8 _TEXT	
  _displayString . . . . . . . .	L Near	 000001C8 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CD Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 0000003C _TEXT	
  _displayInts . . . . . . . . .	L Near	 000000AB _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000CD _TEXT	Length= 000000CB Public STDCALL
  _setup . . . . . . . . . . . .	L Near	 000000EC _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 000000FC _TEXT	
  _signLength  . . . . . . . . .	L Near	 00000118 _TEXT	
  _validateLoop  . . . . . . . .	L Near	 00000122 _TEXT	
  _convert . . . . . . . . . . .	L Near	 00000147 _TEXT	
  _skipSign  . . . . . . . . . .	L Near	 0000015A _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000015C _TEXT	
  _validateNeg . . . . . . . . .	L Near	 00000166 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 00000180 _TEXT	
  _errorExit . . . . . . . . . .	L Near	 00000192 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYELEMENTS  . . . . . . . . .	Number	 0000000Ah   
ASCIIstring  . . . . . . . . . .	Byte	 00000178 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXASCII . . . . . . . . . . . .	Number	 00000039h   
MAXBYTES . . . . . . . . . . . .	Number	 0000000Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINVALUE . . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 000001B7 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boolie . . . . . . . . . . . . .	DWord	 000001CC _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000001C4 _DATA	
comma  . . . . . . . . . . . . .	Byte	 000001BD _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec1  . . . . . . . . . . . . . .	Byte	 00000113 _DATA	
error  . . . . . . . . . . . . .	Byte	 000000C4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruction  . . . . . . . . . .	Byte	 0000004C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxValue . . . . . . . . . . . .	Byte	 00000184 _DATA	
numArray . . . . . . . . . . . .	DWord	 0000018F _DATA	
numCount . . . . . . . . . . . .	DWord	 000001C8 _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
programmer . . . . . . . . . . .	Byte	 00000033 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000AC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000001BB _DATA	
storedDec  . . . . . . . . . . .	DWord	 000001C0 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
