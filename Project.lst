Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/01/21 19:20:21
2String Primitives and Macros    (Proj6_LANDAL.asm	     Page 1 - 1


				TITLE String Primitives and Macros    (Proj6_LANDAL.asm)

				; Author: Allison Land
				; Last Modified: 11/29/21
				; OSU email address: LANDAL@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 12/4/21
				; Description: This program uses macros to take decimal number inputs as strings, and then converts them to 
				;		decimal numbers....
				;-----------------------------------------------------------------------------------------------------

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; MACRO DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			mGetString
				; 
				; Desc:			Gets a string from the user and validates that it contains a valid integer that will 
				;				fit in a 32 bit register (11 characters total, including sign +/-)
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: progTitle (reference), programmer (reference), ec1 (reference), ec2 (reference),
				;			progDesc(reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

					mGetString		MACRO	stringAddress, bytesReadAddress, promptAddress

						;prompt user for string input, store using ReadString
						MOV		EDX, promptAddress
						CALL	WriteString

						MOV		EDX, stringAddress
						MOV		ECX, MAXBYTES
						CALL	ReadString
						MOV		[bytesReadAddress], EAX

					ENDM

					
				; ---------------------------------------------------------------------------------------------------
				; Name:			mDisplayString
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: progTitle (reference), programmer (reference), ec1 (reference), ec2 (reference),
				;			progDesc(reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

					mDisplayString	MACRO	stringAddress
						;print stored string using WriteString
						MOV		EDX, stringAddress
						CALL	WriteString
					ENDM

				;-----------------------------------------------------------------------------------------------------
					
					;CONSTANTS
 =-80000000				MINVALUE = -2147483648    ;negated in code
 = 7FFFFFFF				MAXVALUE = 2147483647
 = 00000039				MAXASCII = 57
 = 0000000C				MAXBYTES = 12
 = 0000000A				ARRAYELEMENTS = 10

 00000000			.data

 00000000 09 09 09 53 74		progTitle	BYTE	"			String Primitives and Macros in MASM Assembly",13,10,0
	   72 69 6E 67 20
	   50 72 69 6D 69
	   74 69 76 65 73
	   20 61 6E 64 20
	   4D 61 63 72 6F
	   73 20 69 6E 20
	   4D 41 53 4D 20
	   41 73 73 65 6D
	   62 6C 79 0D 0A
	   00
 00000033 09 09 09 09 09		programmer	BYTE	"					by Allison Land",13,10,13,10,0
	   62 79 20 41 6C
	   6C 69 73 6F 6E
	   20 4C 61 6E 64
	   0D 0A 0D 0A 00
 0000004C 54 68 69 73 20		instruction	BYTE	"This program requires that you enter ten integers between -2,147,483,648 and 2,147,483,647.",13,10,13,10,0
	   70 72 6F 67 72
	   61 6D 20 72 65
	   71 75 69 72 65
	   73 20 74 68 61
	   74 20 79 6F 75
	   20 65 6E 74 65
	   72 20 74 65 6E
	   20 69 6E 74 65
	   67 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 2D 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 38 20 61 6E
	   64 20 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   2E 0D 0A 0D 0A
	   00
 000000AC 50 6C 65 61 73		prompt		BYTE	"Please enter a number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000000C4 45 52 52 4F 52		error		BYTE	"ERROR: This is either not a valid number, or your integer has too many digits.",0
	   3A 20 54 68 69
	   73 20 69 73 20
	   65 69 74 68 65
	   72 20 6E 6F 74
	   20 61 20 76 61
	   6C 69 64 20 6E
	   75 6D 62 65 72
	   2C 20 6F 72 20
	   79 6F 75 72 20
	   69 6E 74 65 67
	   65 72 20 68 61
	   73 20 74 6F 6F
	   20 6D 61 6E 79
	   20 64 69 67 69
	   74 73 2E 00
 00000113 2A 2A 45 43 3A		ec1			BYTE	"**EC: Numbers each line of user input with running total of user's valid numbers using WriteVal.",13,10,13,10,0
	   20 4E 75 6D 62
	   65 72 73 20 65
	   61 63 68 20 6C
	   69 6E 65 20 6F
	   66 20 75 73 65
	   72 20 69 6E 70
	   75 74 20 77 69
	   74 68 20 72 75
	   6E 6E 69 6E 67
	   20 74 6F 74 61
	   6C 20 6F 66 20
	   75 73 65 72 27
	   73 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   20 75 73 69 6E
	   67 20 57 72 69
	   74 65 56 61 6C
	   2E 0D 0A 0D 0A
	   00
 00000178 00				ASCIIstring	BYTE	?

 00000179  0000000A [			numArray	SDWORD	ARRAYELEMENTS DUP(?)
	    00000000
	   ]
 000001A1 00000001			arrayCount	SDWORD	1				
 000001A5 20 00				space		BYTE	" ",0
 000001A7 2C 20 00			comma		BYTE	", ",0
 000001AA  0000000A [			decArr		SDWORD	10 DUP(?)
	    00000000
	   ]
 000001D2 00000000			storedDec	SDWORD	?
 000001D6 00000000			bytesRead	SDWORD	?
 000001DA 00000000			numCount	SDWORD	0


 00000000			.code
 00000000			main PROC

					;INTRODUCTION
 00000000  BA 00000000 R		MOV		EDX, OFFSET progTitle
 00000005  E8 00000000 E		CALL	WriteString
 0000000A  BA 00000033 R		MOV		EDX, OFFSET programmer
 0000000F  E8 00000000 E		CALL	Writestring
 00000014  BA 00000113 R		MOV		EDX, OFFSET ec1
 00000019  E8 00000000 E		CALL	WriteString
 0000001E  BA 0000004C R		MOV		EDX, OFFSET instruction
 00000023  E8 00000000 E		CALL	WriteString


					;GET 10 VALID INTEGERS FROM USER
					;set up:
 00000028  BF 000001D2 R		MOV		EDI, OFFSET storedDec
 0000002D  BE 00000179 R		MOV		ESI, OFFSET numArray
 00000032  B9 0000000A			MOV		ECX, ARRAYELEMENTS
 00000037  BB 00000000			MOV		EBX, 0

 0000003C				_loop:
					;EXTRA CREDIT 1
					;PUSH	OFFSET arrayCount
					;PUSH	OFFSET ASCIIstring
					;CALL	WriteVal
					;MOV	EDX, OFFSET space
					;CALL	WriteString

 0000003C  68 000000C4 R		PUSH	OFFSET error
 00000041  68 000001D2 R		PUSH	OFFSET storedDec
 00000046  68 00000178 R		PUSH	OFFSET ASCIIstring
 0000004B  68 000001D6 R		PUSH	OFFSET bytesRead
 00000050  68 000000AC R		PUSH	OFFSET prompt
 00000055  E8 00000024			CALL	ReadVal
 0000005A  FF 05 000001A1 R		INC		arrayCount
 00000060  E8 00000000 E		CALL	CrLF

					;STORE IN ARRAY (using register indirect addressing)

 00000065  BE 000001D2 R		MOV		ESI, OFFSET storedDec	; num going into array
 0000006A  8B 16			MOV		EDX, [ESI]
 0000006C  89 93 00000179 R		MOV		numArray[EBX], EDX				; move value into array
 00000072  83 C3 04			ADD		EBX, TYPE numArray					
 00000075  E2 C5			LOOP	_loop					; LOOP x's ARRAYSIZE


					;loop through array, display ints
				;	MOV		ESI

					;calculate sum and display

					;calvulate average and display

					Invoke ExitProcess,0	; exit to operating system
 00000077  6A 00	   *	    push   +000000000h
 00000079  E8 00000000 E   *	    call   ExitProcess
 0000007E			main ENDP


				; PROCEDURE DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			ReadVal
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: OFFSET error, OFFSET storedDec, OFFSET ASCIIstring, OFFSET bytesRead, OFFSET prompt}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

 0000007E				readVal PROC	USES ECX EBX ESI EDI
					;invoke mGetString
 0000007E  51		   *	    push   ecx
 0000007F  53		   *	    push   ebx
 00000080  56		   *	    push   esi
 00000081  57		   *	    push   edi
 00000082  55				PUSH	EBP
 00000083  8B EC			MOV		EBP, ESP
					mGetString		[EBP + 32], [EBP + 28], [EBP + 24]  ;stringAddress, bytesReadAddress, promptAddress
 00000085  8B 55 18	     1			MOV		EDX, [EBP + 24]
 00000088  E8 00000000 E     1			CALL	WriteString
 0000008D  8B 55 20	     1			MOV		EDX, [EBP + 32]
 00000090  B9 0000000C	     1			MOV		ECX, MAXBYTES
 00000095  E8 00000000 E     1			CALL	ReadString
 0000009A  89 45 1C	     1			MOV		[[EBP + 28]], EAX

					; string primitive setup
 0000009D  8B 4D 1C			MOV		ECX, [EBP + 28]		; bytesread
 000000A0  8B 75 20			MOV		ESI, [EBP + 32]     ;input array ASCIIstring (from mGetString)
 000000A3  8B 7D 24			MOV		EDI, [EBP + 36]		;output storedDec
 000000A6  BB 00000000			MOV		EBX, 0				;for conversion algorithim

					;validate that characters are valid
 000000AB				_stringLoop:
 000000AB  33 C0			XOR		EAX, EAX
 000000AD  AC				LODSB	
 000000AE  3C 2D			CMP		AL, 45			; -
 000000B0  74 2A			JE		_skip

 000000B2				_cont:
 000000B2  3C 30			CMP		AL, 48
 000000B4  7C 29			JL		_error
 000000B6  3C 39			CMP		AL, 57
 000000B8  7F 25			JG		_error
 000000BA  EB 0F			JMP		_convert

 000000BC				_sign:
 000000BC  83 F9 01			CMP		ECX, 1
 000000BF  8B 45 24			MOV		EAX, [EBP + 36]
 000000C2  F7 D8			NEG		EAX
 000000C4  89 45 24			MOV		[EBP + 36], EAX
 000000C7  EB 3C			JMP		_validate
 000000C9  75 14			JNE		_error

					; convert ASCII to SDWORD using LODSB/STOSB (convert each digit)
 000000CB				_convert:	
 000000CB  83 E8 30			SUB		EAX, 48
 000000CE  6B DB 0A			IMUL	EBX, 10
 000000D1  03 C3			ADD		EAX, EBX
 000000D3  8B D8			MOV		EBX, EAX
 000000D5  E2 D4			LOOP	_stringLoop
 000000D7  89 5D 24			MOV		[EBP + 36], EBX
 000000DA  EB 0D			JMP		_validateNeg

 000000DC				_skip:
 000000DC  49				DEC		ECX
 000000DD  EB CC			JMP		_stringLoop
 000000DF				_error:
 000000DF  8B 55 28			MOV		EDX, [EBP + 40]    
 000000E2  E8 00000000 E		CALL	WriteString
 000000E7  EB 28			JMP		_exit

					;determine if negative
 000000E9				_validateNeg:
					;negate if negative
 000000E9  8B 75 20			MOV		ESI, [EBP + 32]
 000000EC  B9 00000001			MOV		ECX, 1
 000000F1  AC				LODSB
 000000F2  3C 2D			CMP		AL, 45
 000000F4  75 0F			JNE		_validate
 000000F6  8B 7D 24			MOV		EDI, [EBP + 36]
 000000F9  81 FF 80000000		CMP		EDI, MINVALUE
 000000FF  7F DE			JG		_error
 00000101  8B C7			MOV		EAX, EDI
 00000103  EB 0C			JMP		_exit
					
					;verify fits in 32bit register
 00000105				_validate:
 00000105  BA 7FFFFFFF			MOV		EDX, MAXVALUE
 0000010A  3B D3			CMP		EDX, EBX
 0000010C  7F D1			JG		_error
 0000010E  89 5D 24			MOV		[EBP + 36], EBX

 00000111				_exit:	
 00000111  5D				POP EBP
					RET 
 00000112  5F		   *	    pop    edi
 00000113  5E		   *	    pop    esi
 00000114  5B		   *	    pop    ebx
 00000115  59		   *	    pop    ecx
 00000116  C3		   *	    ret    00000h
 00000117				ReadVal ENDP

				; ---------------------------------------------------------------------------------------------------
				; Name:			WriteVal
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: string (reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------
					
 00000117				WriteVal PROC USES EAX EDX EBX ECX

 00000117  50		   *	    push   eax
 00000118  52		   *	    push   edx
 00000119  53		   *	    push   ebx
 0000011A  51		   *	    push   ecx
 0000011B  55				PUSH	EBP
 0000011C  8B EC			MOV		EBP, ESP

 0000011E  BB 00000000			MOV		EBX, 0			;initialize digit count

					;convert SDWORD to ASCII
 00000123				_loop:
 00000123  99				CDQ
 00000124  8B 45 1C			MOV		EAX, [EBP + 28]			;move storedDec SDWORD into EDX
 00000127  43				INC		EBX	
 00000128  B9 0000000A			MOV		ECX, 10
 0000012D  F7 F9			IDIV	ECX
 0000012F  B9 00000000			MOV		ECX, 0
 00000134  3B C1			CMP		EAX, ECX				;if quotient is 0, then last digit
 00000136  7E 09			JLE		_lastDigit
 00000138  83 C2 30			ADD		EDX, 48					;else add 48 to remainder to convert to ASCII
 0000013B  89 54 1D 18			MOV		[EBP + 24 + EBX], EDX	;move into ASCIIstring
 0000013F  EB E2			JMP		_loop

 00000141				_lastDigit:
 00000141  83 FA 00			CMP		EDX, 0
 00000144  7C 02			JL		_negative
 00000146  EB 12			JMP		_displayString

 00000148				_negative:
 00000148  F7 DA			NEG		EDX
 0000014A  83 C2 30			ADD		EDX, 48
 0000014D  89 54 1D 08			MOV		[EBP + 8 + EBX], EDX
 00000151  43				INC		EBX
 00000152  C7 44 1D 08 2D		MOV		[EBP + 8 + EBX], 45
	   22000000

					;invoke mDisplayString
 0000015A				_displayString:
					mDisplayString	[EBP+24]
 0000015A  8B 55 18	     1			MOV		EDX, [EBP+24]
 0000015D  E8 00000000 E     1			CALL	WriteString

 00000162  5D				POP EBP
 00000163  59		   *	    pop    ecx
 00000164  5B		   *	    pop    ebx
 00000165  5A		   *	    pop    edx
 00000166  58		   *	    pop    eax
 00000167  C2 0014			RET	20
 0000016A				WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/01/21 19:20:21
2String Primitives and Macros    (Proj6_LANDAL.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001DE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000016A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000117 _TEXT	Length= 00000053 Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 00000123 _TEXT	
  _lastDigit . . . . . . . . . .	L Near	 00000141 _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000148 _TEXT	
  _displayString . . . . . . . .	L Near	 0000015A _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007E Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 0000003C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 0000007E _TEXT	Length= 00000099 Public STDCALL
  _stringLoop  . . . . . . . . .	L Near	 000000AB _TEXT	
  _cont  . . . . . . . . . . . .	L Near	 000000B2 _TEXT	
  _sign  . . . . . . . . . . . .	L Near	 000000BC _TEXT	
  _convert . . . . . . . . . . .	L Near	 000000CB _TEXT	
  _skip  . . . . . . . . . . . .	L Near	 000000DC _TEXT	
  _error . . . . . . . . . . . .	L Near	 000000DF _TEXT	
  _validateNeg . . . . . . . . .	L Near	 000000E9 _TEXT	
  _validate  . . . . . . . . . .	L Near	 00000105 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 00000111 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYELEMENTS  . . . . . . . . .	Number	 0000000Ah   
ASCIIstring  . . . . . . . . . .	Byte	 00000178 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXASCII . . . . . . . . . . . .	Number	 00000039h   
MAXBYTES . . . . . . . . . . . .	Number	 0000000Ch   
MAXVALUE . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINVALUE . . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 000001A1 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000001D6 _DATA	
comma  . . . . . . . . . . . . .	Byte	 000001A7 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
decArr . . . . . . . . . . . . .	DWord	 000001AA _DATA	
ec1  . . . . . . . . . . . . . .	Byte	 00000113 _DATA	
error  . . . . . . . . . . . . .	Byte	 000000C4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruction  . . . . . . . . . .	Byte	 0000004C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000179 _DATA	
numCount . . . . . . . . . . . .	DWord	 000001DA _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
programmer . . . . . . . . . . .	Byte	 00000033 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000AC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000001A5 _DATA	
storedDec  . . . . . . . . . . .	DWord	 000001D2 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
