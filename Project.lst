Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/05/21 21:34:43
2String Primitives and Macros    (Proj6_LANDAL.asm	     Page 1 - 1


				TITLE String Primitives and Macros    (Proj6_LANDAL.asm)

				; Author: Allison Land
				; Last Modified: 12/5/21
				; OSU email address: LANDAL@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 12/5/21
				; Description: This program uses macros to take decimal number inputs as strings, and then converts them to 
				;		decimal numbers and stores them in an array. It then performs calculations and converts the stored 
				;		numbers back into strings, and displays those strings. 
				;-----------------------------------------------------------------------------------------------------

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; MACRO DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			mGetString
				; 
				; Desc:			Displays a string. 
				;
				; Preconditions: Called in ReadVal - arguments are pushed onto the stack. 
				;
				; Postconditions: EDX, ECX, EAX changed
				;
				; Receives: {parameters: StringAddress (reference), bytesReadAddress (reference), 
				;			promptAddress (reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

					mGetString		MACRO	stringAddress, bytesReadAddress, promptAddress

						;prompt user for string input, store using ReadString
						MOV		EDX, promptAddress
						CALL	WriteString

						MOV		EDX, stringAddress
						MOV		ECX, MAXBYTES
						CALL	ReadString
						MOV		[bytesReadAddress], EAX

					ENDM


					
				; ---------------------------------------------------------------------------------------------------
				; Name:			mDisplayString
				; 
				; Desc:			Displays string by reversing it (due to reverse storage)	
				;
				; Preconditions: Called in WriteVal - arguments are pushed onto the stack. 
				;
				; Postconditions: EDX, ECX, ESI, EDI, ESI, EAX changed
				;
				; Receives: {parameters: StringAddress (reference), revStringAddress (reference), 
				;			stringLength (value)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------


					mDisplayString	MACRO	stringAddress, revStringAddress, stringLength
						;print stored string using WriteString

						CMP		stringLength, 1
						JNE		_setup
						MOV    EDX, stringAddress
						CALL   WriteString
						JMP	   _end

						_setup:
						CMP	   stringLength, 0
						JE	   _end
						MOV    ECX, stringLength
						MOV    ESI, stringAddress
						MOV    EDI, revStringAddress
						ADD    ESI, ECX
						DEC    ESI
				  
						;REVERSE STRING
						_reverseLoop:
						STD
						LODSB
						CLD
						STOSB
						LOOP   _reverseLoop

						;PRINT STRING
						MOV    EDX, revStringAddress
						CALL   WriteString
						_end:
					
					ENDM

				;-----------------------------------------------------------------------------------------------------
					
					;CONSTANTS
 = 7FFFFFFF				MAXVAL = 2147483647  ;negated  and incremented in code
 = 00000039				MAXASCII = 57
 = 0000000C				MAXBYTES = 12
 = 0000000A				ARRAYELEMENTS = 10

 00000000			.data

 00000000 09 09 09 53 74		progTitle	BYTE	"			String Primitives and Macros in MASM Assembly",13,10,0
	   72 69 6E 67 20
	   50 72 69 6D 69
	   74 69 76 65 73
	   20 61 6E 64 20
	   4D 61 63 72 6F
	   73 20 69 6E 20
	   4D 41 53 4D 20
	   41 73 73 65 6D
	   62 6C 79 0D 0A
	   00
 00000033 09 09 09 09 09		programmer	BYTE	"					by Allison Land",13,10,13,10,0
	   62 79 20 41 6C
	   6C 69 73 6F 6E
	   20 4C 61 6E 64
	   0D 0A 0D 0A 00
 0000004C 54 68 69 73 20		instruction	BYTE	"This program requires that you enter ten integers between -2,147,483,648 and 2,147,483,647.",13,10,13,10,0
	   70 72 6F 67 72
	   61 6D 20 72 65
	   71 75 69 72 65
	   73 20 74 68 61
	   74 20 79 6F 75
	   20 65 6E 74 65
	   72 20 74 65 6E
	   20 69 6E 74 65
	   67 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 2D 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 38 20 61 6E
	   64 20 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   2E 0D 0A 0D 0A
	   00
 000000AC 50 6C 65 61 73		prompt		BYTE	"Please enter a number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000000C4 45 52 52 4F 52		error		BYTE	"ERROR: This is either not a valid number, or your integer has too many digits.",0
	   3A 20 54 68 69
	   73 20 69 73 20
	   65 69 74 68 65
	   72 20 6E 6F 74
	   20 61 20 76 61
	   6C 69 64 20 6E
	   75 6D 62 65 72
	   2C 20 6F 72 20
	   79 6F 75 72 20
	   69 6E 74 65 67
	   65 72 20 68 61
	   73 20 74 6F 6F
	   20 6D 61 6E 79
	   20 64 69 67 69
	   74 73 2E 00
 00000113 2A 2A 45 43 3A		ec1			BYTE	"**EC: Numbers each line of user input with running total of user's valid numbers using WriteVal.",13,10,13,10,0
	   20 4E 75 6D 62
	   65 72 73 20 65
	   61 63 68 20 6C
	   69 6E 65 20 6F
	   66 20 75 73 65
	   72 20 69 6E 70
	   75 74 20 77 69
	   74 68 20 72 75
	   6E 6E 69 6E 67
	   20 74 6F 74 61
	   6C 20 6F 66 20
	   75 73 65 72 27
	   73 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   20 75 73 69 6E
	   67 20 57 72 69
	   74 65 56 61 6C
	   2E 0D 0A 0D 0A
	   00
 00000178 59 6F 75 20 65		displayList BYTE	"You entered the following numbers: ",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 0000019E 54 68 65 69 72		sumString	BYTE	"Their sum is: ",0
	   20 73 75 6D 20
	   69 73 3A 20 00
 000001AD 54 68 65 69 72		avgString	BYTE	"Their rounded average is: ",0
	   20 72 6F 75 6E
	   64 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 000001C8 54 68 61 74 20		farewell	BYTE	"That was fun - cya later!",0
	   77 61 73 20 66
	   75 6E 20 2D 20
	   63 79 61 20 6C
	   61 74 65 72 21
	   00
 000001E2  0000000C [			ASCIIstring	BYTE	MAXBYTES DUP(?)
	    00
	   ]
 000001EE  0000000C [			emptyString	BYTE	MAXBYTES DUP(?)
	    00
	   ]
 000001FA  0000000C [			revString	BYTE	MAXBYTES DUP(?)
	    00
	   ]
 00000206 32 31 34 37 34		maxValue	BYTE	"2147483648",0			
	   38 33 36 34 38
	   00
 00000211 20 00				space		BYTE	" ",0
 00000213 2C 20 00			comma		BYTE	", ",0
 00000216  0000000A [			numArray	SDWORD	ARRAYELEMENTS DUP(?)
	    00000000
	   ]
 0000023E 00000001			arrayCount	SDWORD	1	
 00000242 00000000			sum			SDWORD	?
 00000246 00000000			average		SDWORD	?
 0000024A 00000000			storedDec	SDWORD	?
 0000024E 00000000			bytesRead	SDWORD	?
 00000252 00000000			numCount	SDWORD	0
 00000256 00000000			boolie		SDWORD	0				; 0 = TRUE 1 = FALSE

				;-----------------------------------------------------------------------------------------------------
 00000000			.code
 00000000			main PROC

					;INTRODUCTION
 00000000  BA 00000000 R		MOV		EDX, OFFSET progTitle
 00000005  E8 00000000 E		CALL	WriteString
 0000000A  BA 00000033 R		MOV		EDX, OFFSET programmer
 0000000F  E8 00000000 E		CALL	Writestring
 00000014  BA 00000113 R		MOV		EDX, OFFSET ec1
 00000019  E8 00000000 E		CALL	WriteString
 0000001E  BA 0000004C R		MOV		EDX, OFFSET instruction
 00000023  E8 00000000 E		CALL	WriteString

					;GET 10 VALID INTEGERS FROM USER
					;set up:
 00000028  BF 0000024A R		MOV		EDI, OFFSET storedDec
 0000002D  BE 00000216 R		MOV		ESI, OFFSET numArray
 00000032  B9 0000000A			MOV		ECX, ARRAYELEMENTS
 00000037  BB 00000000			MOV		EBX, 0

 0000003C				_loop:
					;EXTRA CREDIT 1
 0000003C  99				CDQ
 0000003D  B8 0000000A			MOV		EAX, 10
 00000042  F7 3D 0000023E R		IDIV	arrayCount
 00000048  42				INC		EDX
 00000049  89 15 0000024E R		MOV		bytesRead, EDX
 0000004F  68 000001FA R		PUSH	OFFSET revString
 00000054  68 0000024E R		PUSH	OFFSET bytesRead
 00000059  68 000001FA R		PUSH	OFFSET revString
 0000005E  FF 35 0000023E R		PUSH	arrayCount
 00000064  68 000001E2 R		PUSH	OFFSET ASCIIstring
 00000069  E8 000002F1			CALL	WriteVal
 0000006E  BA 00000211 R		MOV		EDX, OFFSET space
 00000073  E8 00000000 E		CALL	WriteString

 00000078  68 00000256 R		PUSH	OFFSET boolie
 0000007D  68 00000206 R		PUSH	OFFSET maxValue
 00000082  68 000000C4 R		PUSH	OFFSET error
 00000087  68 0000024A R		PUSH	OFFSET storedDec
 0000008C  68 000001E2 R		PUSH	OFFSET ASCIIstring
 00000091  68 0000024E R		PUSH	OFFSET bytesRead
 00000096  68 000000AC R		PUSH	OFFSET prompt
 0000009B  E8 000001A6			CALL	ReadVal
 000000A0  E8 00000000 E		CALL	CrLF
 000000A5  83 3D 00000256 R		CMP		boolie, 1
	   01
 000000AC  75 8E			JNE		_loop
 000000AE  FF 05 0000023E R		INC		arrayCount
 000000B4  C7 05 00000256 R		MOV		boolie, 0
	   00000000

					;STORE IN ARRAY (using register indirect addressing)
 000000BE  8B 35 0000024A R		MOV		ESI, storedDec	; num going into array
 000000C4  BF 00000216 R		MOV		EDI, OFFSET	numArray
 000000C9  03 FB			ADD		EDI, EBX
 000000CB  89 37			MOV		[EDI], ESI				; move value into array
 000000CD  83 C3 04			ADD		EBX, TYPE numArray				
					
					; clear ASCIIstring
 000000D0  51				PUSH	ECX
 000000D1  FC				CLD
 000000D2  B9 0000000C			MOV    ECX, MAXBYTES
 000000D7  BE 000001EE R		MOV    ESI, OFFSET emptyString
 000000DC  BF 000001E2 R		MOV    EDI, OFFSET ASCIIstring
 000000E1  F3/ A4			REP    MOVSB
 000000E3  59				POP		ECX
 000000E4  49				DEC		ECX
 000000E5  83 F9 00			CMP		ECX, 0
 000000E8  0F 85 FFFFFF4E		JNE	   _loop

					;loop through array, display ints
 000000EE  BA 00000178 R		MOV		EDX, OFFSET displayList
 000000F3  E8 00000000 E		CALL	WriteString

 000000F8  FC				CLD
 000000F9  8B 0D 0000023E R		MOV		ECX, arrayCount
 000000FF  BB 00000000			MOV		EBX, 0

 00000104				_displayInts:
 00000104  BE 00000216 R		MOV		ESI, OFFSET numarray
 00000109  68 000001FA R		PUSH	OFFSET	revString
 0000010E  68 0000024E R		PUSH	OFFSET bytesRead
 00000113  68 000001FA R		PUSH	OFFSET revString
 00000118  FF 34 1E			PUSH	[ESI + EBX]
 0000011B  68 000001E2 R		PUSH	OFFSET ASCIIstring
 00000120  E8 0000023A			CALL	WriteVal
 00000125  83 C3 04			ADD		EBX, TYPE numArray
 00000128  83 F9 02			CMP		ECX, 2
 0000012B  74 34			JE		_break
 0000012D  BA 00000213 R		MOV		EDX, OFFSET comma
 00000132  E8 00000000 E		CALL	WriteString

					; clear ASCIIstring
 00000137				_clear:
 00000137  51				PUSH	ECX
 00000138  FC				CLD
 00000139  B9 0000000C			MOV    ECX, MAXBYTES
 0000013E  BE 000001EE R		MOV    ESI, OFFSET emptyString
 00000143  BF 000001E2 R		MOV    EDI, OFFSET ASCIIstring
 00000148  F3/ A4			REP    MOVSB
 0000014A  59				POP		ECX

					; clear revString
 0000014B				_clear2:
 0000014B  51				PUSH	ECX
 0000014C  FC				CLD
 0000014D  B9 0000000C			MOV    ECX, MAXBYTES
 00000152  BE 000001EE R		MOV    ESI, OFFSET emptyString
 00000157  BF 000001FA R		MOV    EDI, OFFSET revString
 0000015C  F3/ A4			REP    MOVSB
 0000015E  59				POP	   ECX	

 0000015F  E2 A3			LOOP	_displayInts
 00000161				_break:

					; clear ASCIIstring
 00000161  51				PUSH	ECX
 00000162  FC				CLD
 00000163  B9 0000000C			MOV    ECX, MAXBYTES
 00000168  BE 000001EE R		MOV    ESI, OFFSET emptyString
 0000016D  BF 000001E2 R		MOV    EDI, OFFSET ASCIIstring
 00000172  F3/ A4			REP    MOVSB
 00000174  59				POP		ECX

					; clear revString
 00000175  51				PUSH	ECX
 00000176  FC				CLD
 00000177  B9 0000000C			MOV    ECX, MAXBYTES
 0000017C  BE 000001EE R		MOV    ESI, OFFSET emptyString
 00000181  BF 000001FA R		MOV    EDI, OFFSET revString
 00000186  F3/ A4			REP    MOVSB
 00000188  59				POP	   ECX	


					;CALCULATE AND DISPLAY SUM
 00000189  E8 00000000 E		CALL	CrLf
 0000018E  E8 00000000 E		CALL	CrLF
 00000193  BA 0000019E R		MOV		EDX, OFFSET sumString
 00000198  E8 00000000 E		CALL	WriteString

 0000019D  8B 0D 0000023E R		MOV		ECX, arrayCount
 000001A3  83 E9 02			SUB		ECX, 2
 000001A6  BE 00000216 R		MOV		ESI, OFFSET numArray
 000001AB  BF 00000242 R		MOV		EDI, OFFSET sum
 000001B0  BB 00000000			MOV		EBX, 0
 000001B5  8B 04 1E			MOV		EAX, [ESI+EBX]
 000001B8				_summation:
 000001B8  83 C3 04			ADD		EBX, 4
 000001BB  03 04 1E			ADD		EAX, [ESI+EBX]
 000001BE  E2 F8			LOOP	_summation
 000001C0  89 07			MOV		[EDI], EAX

 000001C2  68 000001FA R		PUSH	OFFSET revString
 000001C7  68 0000024E R		PUSH	OFFSET bytesRead
 000001CC  68 000001FA R		PUSH	OFFSET revString
 000001D1  FF 37			PUSH	[EDI]
 000001D3  68 000001E2 R		PUSH	OFFSET ASCIIstring
 000001D8  E8 00000182			CALL	WriteVal
 000001DD  E8 00000000 E		CALL	CrLf
 000001E2  E8 00000000 E		CALL	CrLf

					;CALCULATE AND DISPLAY AVERAGE
 000001E7  BA 000001AD R		MOV		EDX, OFFSET avgString
 000001EC  E8 00000000 E		CALL	WriteString
					
 000001F1  99				CDQ
 000001F2  A1 00000242 R		MOV		EAX, sum
 000001F7  8B 0D 0000023E R		MOV		ECX, arrayCount
 000001FD  83 E9 01			SUB		ECX, 1
 00000200  F7 F9			IDIV	ECX
 00000202  A3 00000246 R		MOV		average, EAX

 00000207  68 000001FA R		PUSH	OFFSET revString
 0000020C  68 0000024E R		PUSH	OFFSET bytesRead
 00000211  68 000001FA R		PUSH	OFFSET revString
 00000216  50				PUSH	EAX
 00000217  68 000001E2 R		PUSH	OFFSET ASCIIstring
 0000021C  E8 0000013E			CALL	WriteVal
					
 00000221  E8 00000000 E		CALL	CrLF
 00000226  E8 00000000 E		CALL	CrLF
 0000022B  BA 000001C8 R		MOV		EDX, OFFSET farewell
 00000230  E8 00000000 E		CALL	WriteString

 00000235  E8 00000000 E		CALL	CrLf
 0000023A  E8 00000000 E		CALL	CrlF
					
					Invoke ExitProcess,0	; exit to operating system
 0000023F  6A 00	   *	    push   +000000000h
 00000241  E8 00000000 E   *	    call   ExitProcess
 00000246			main ENDP


				; PROCEDURE DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			ReadVal
				; 
				; Desc:			Gets a string from the user and validates that it contains a valid integer that will 
				;				fit in a 32 bit register (11 characters total, including sign +/-)		
				;
				; Preconditions: 	PUSHED TO STACK:	OFFSET boolie, OFFSET maxValue, OFFSET error, OFFSET storedDec
				;				OFFSET ASCIIstring, OFFSET bytesRead, OFFSET prompt

				;
				; Postconditions: Registers preserved on stack and not changed.
				;
				; Receives: {parameters: OFFSET error, OFFSET storedDec, OFFSET ASCIIstring, OFFSET bytesRead, OFFSET prompt}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

 00000246				readVal PROC	USES ECX EDX ESI EDI

					;invoke mGetString
 00000246  51		   *	    push   ecx
 00000247  52		   *	    push   edx
 00000248  56		   *	    push   esi
 00000249  57		   *	    push   edi
 0000024A  55				PUSH	EBP
 0000024B  8B EC			MOV		EBP, ESP
					mGetString		[EBP + 32], [EBP + 28], [EBP + 24]  ;stringAddress, bytesReadAddress, promptAddress
 0000024D  8B 55 18	     1			MOV		EDX, [EBP + 24]
 00000250  E8 00000000 E     1			CALL	WriteString
 00000255  8B 55 20	     1			MOV		EDX, [EBP + 32]
 00000258  B9 0000000C	     1			MOV		ECX, MAXBYTES
 0000025D  E8 00000000 E     1			CALL	ReadString
 00000262  89 45 1C	     1			MOV		[[EBP + 28]], EAX

					; string primitive setup
 00000265				_setup:
 00000265  FC				CLD
 00000266  8B 55 1C			MOV		EDX, [EBP + 28]
 00000269  8B CA			MOV		ECX, EDX				; bytesread
 0000026B  8B 75 20			MOV		ESI, [EBP + 32]			; input array ASCIIstring (from mGetString)
 0000026E  BF 00000000			MOV		EDI, 0					; for conversion algorithim
 00000273  8B 55 2C			MOV		EDX, [EBP + 44]			; track iteration through maxvalue chars

					;CHECK FOR SIGNS
 00000276				_stringLoop:
 00000276  33 C0			XOR		EAX, EAX
 00000278  AC				LODSB	
 00000279  3C 2D			CMP		AL, 45			; -
 0000027B  0F 84 00000089		JE		_skipSign
 00000281  3C 2B			CMP		AL, 43			; +
 00000283  0F 84 00000081		JE		_skipSign
 00000289  3B 4D 1C			CMP		ECX, [EBP + 28]
 0000028C  75 28			JNE		_numsOnly

					;VALIDATE LENGTH FIRST ITERATION
 0000028E  83 F9 0A			CMP		ECX, LENGTHOF MAXVALUE-1	; if more chars than maxvalue (no sign)
 00000291  7F 79			JG		_error
 00000293  83 F9 0A			CMP		ECX, LENGTHOF MAXVALUE-1
 00000296  74 0F			JE		_validateLoop1
 00000298  EB 1C			JMP		_numsOnly

 0000029A				_signLength:
 0000029A  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE
 0000029D  7F 6D			JG		_error	
 0000029F  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE 
 000002A2  7C 12			JL		_numsOnly

 000002A4				_validateLoop2:					; if same length as max value, check if value is greater than maxvalue
 000002A4  33 C0			XOR		EAX, EAX
 000002A6  AC				LODSB
 000002A7				_validateLoop1:
 000002A7  8B 55 1C			MOV		EDX, [EBP+28]			;bytes read/ counter
 000002AA  2B D1			SUB		EDX, ECX
 000002AC  3A 82 00000206 R		CMP		AL, maxValue[EDX]		
 000002B2  7F 58			JG		_error
 000002B4  E2 EE			LOOP	_validateLoop2

 000002B6				_numsOnly:
 000002B6  FC				CLD								; check for invalid chars
 000002B7  8B 55 1C			MOV		EDX, [EBP + 28]
 000002BA  8B CA			MOV		ECX, EDX
 000002BC  8B 75 20			MOV		ESI, [EBP + 32]			; input array ASCIIstring (from mGetString)
 000002BF  33 C0			XOR		EAX, EAX
 000002C1  AC				LODSB	
 000002C2  3C 2D			CMP		AL, 45			; -
 000002C4  74 0C			JE		_loopNumsOnly
 000002C6  3C 2B			CMP		AL, 43			; +	
 000002C8  74 08			JE		_loopNumsOnly
 000002CA				_checknum:
 000002CA  3C 30			CMP		AL, 48
 000002CC  7C 3E			JL		_error
 000002CE  3C 39			CMP		AL, 57
 000002D0  7F 3A			JG		_error
 000002D2				_loopNumsOnly:
 000002D2  33 C0			XOR		EAX, EAX
 000002D4  AC				LODSB
 000002D5  E2 F3			LOOP	_checkNum
					
 000002D7				_convert2:                      ;setup conversion
 000002D7  FC				CLD
 000002D8  8B 55 1C			MOV		EDX, [EBP + 28]
 000002DB  8B CA			MOV		ECX, EDX				; bytesread
 000002DD  8B 75 20			MOV		ESI, [EBP + 32]			; input array ASCIIstring (from mGetString)
 000002E0  BF 00000000			MOV		EDI, 0					; for conversion algorithim

 000002E5				_convert:
 000002E5  33 C0			XOR		EAX, EAX
 000002E7  AC				LODSB
 000002E8  3C 2D			CMP		AL, 45
 000002EA  74 15			JE		_convertLoop
 000002EC  3C 2B			CMP		AL, 43
 000002EE  74 11			JE		_convertLoop
 000002F0  83 E8 30			SUB		EAX, 48							;convert ASCII to SDWORD
 000002F3  6B FF 0A			IMUL	EDI, 10
 000002F6  03 C7			ADD		EAX, EDI
 000002F8  8B F8			MOV		EDI, EAX
 000002FA  83 FF 00			CMP		EDI, 0
 000002FD  7D 02			JGE		_convertLoop
 000002FF  F7 DF			NEG		EDI

 00000301				_convertLoop:
 00000301  E2 E2			LOOP	_convert
 00000303  8B 45 24			MOV		EAX, [EBP+36]
 00000306  89 38			MOV		[EAX], EDI
 00000308  EB 0C			JMP		_validateNeg

 0000030A				_skipSign:
 0000030A  EB 8E			JMP		_signLength ; jump

 0000030C				_error:
 0000030C  8B 55 28			MOV		EDX, [EBP + 40]    
 0000030F  E8 00000000 E		CALL	WriteString
 00000314  EB 43			JMP		_errorExit

					; NEGATE IF NEGATIVE
 00000316				_validateNeg:
 00000316  B9 00000001			MOV		ECX, 1	
 0000031B  8B 75 20			MOV		ESI, [EBP + 32]     ;input array ASCIIstring (from mGetString)
 0000031E  AC				LODSB
 0000031F  3C 2D			CMP		AL, 45				;check if first char is -
 00000321  75 0F			JNE		_exit
 00000323  F7 DF			NEG		EDI
 00000325  8B 45 24			MOV		EAX, [EBP+36]
 00000328  81 FF 80000000		CMP		EDI, -MAXVAL-1
 0000032E  7C DC			JL		_error
 00000330  89 38			MOV		[EAX], EDI

 00000332				_exit:
 00000332  B9 00000001			MOV		ECX, 1	
 00000337  8B 75 20			MOV		ESI, [EBP + 32]     ;input array ASCIIstring (from mGetString)
 0000033A  AC				LODSB
 0000033B  3C 2D			CMP		AL, 45
 0000033D  75 08			JNE		_exit2
 0000033F  81 FF 7FFFFFFF		CMP		EDI, MAXVAL
 00000345  7F C5			JG		_error

 00000347				_exit2:
 00000347  33 C9			XOR		ECX, ECX
 00000349  8B 55 30			MOV		EDX, [EBP + 48]
 0000034C  B9 00000001			MOV		ECX, 1
 00000351  89 0A			MOV		[EDX], ECX			; boolie return TRUE (1) 
 00000353  89 7D 24			MOV		[EBP + 36], EDI		; output storedDec
 00000356  89 55 2A			MOV		[EBP + 42], EDX
 00000359				_errorExit:
 00000359  5D				POP EBP
					RET 
 0000035A  5F		   *	    pop    edi
 0000035B  5E		   *	    pop    esi
 0000035C  5A		   *	    pop    edx
 0000035D  59		   *	    pop    ecx
 0000035E  C3		   *	    ret    00000h
 0000035F				ReadVal ENDP

				; ---------------------------------------------------------------------------------------------------
				; Name:			WriteVal
				; 
				; Desc:			Converts a SDWORD to ASCII and displays the number value as a string. 	
				;
				; Preconditions: 	PUSHED TO STACK:	OFFSET revString, OFFSET bytesRead, OFFSET revString
				;				value to display, OFFSET ASCIIstring
				;
				; Postconditions: Registers preserved on stack and not changed. 
				;				
				;
				; Receives: {parameters:  revString (reference), bytesRead (reference), revString (reference)
				;				value to display (value), ASCIIstring (reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------
					
 0000035F			WriteVal PROC USES EAX EDX EBX ECX

 0000035F  50		   *	    push   eax
 00000360  52		   *	    push   edx
 00000361  53		   *	    push   ebx
 00000362  51		   *	    push   ecx
 00000363  55				PUSH	EBP
 00000364  8B EC			MOV		EBP, ESP

 00000366  BB 00000000			MOV		EBX, 0					;initialize digit count

 0000036B  33 D2			XOR		EDX, EDX
 0000036D  8B 45 1C			MOV		EAX, [EBP + 28]			;move value into EAX
 00000370				_loop:
 00000370  99				CDQ
 00000371  B9 0000000A			MOV		ECX, 10
 00000376  F7 F9			IDIV	ECX
 00000378  B9 00000000			MOV		ECX, 0
 0000037D  8B FA			MOV		EDI, EDX
 0000037F  83 C7 30			ADD		EDI, 48					;else add 48 to remainder to convert to ASCII
 00000382  8B 4D 18			MOV		ECX, [EBP + 24]			;move into ASCIIstring
 00000385  03 CB			ADD		ECX, EBX
 00000387  89 39			MOV		[ECX], EDI				
 00000389  43				INC		EBX
 0000038A  83 F8 00			CMP		EAX, 0					;if quotient is 0, then last digit
 0000038D  7E 02			JLE		_isNegative
 0000038F  EB DF			JMP		_loop

 00000391				_isNegative:
 00000391  8B 55 1C			MOV		EDX, [EBP + 28]
 00000394  83 FA 00			CMP		EDX, 0
 00000397  7D 0C			JGE		_displaystring
 00000399  43			 	INC		EBX
 0000039A  8B 7C 1D 18			MOV		EDI, [EBP + 24 + EBX]
 0000039E  BA 0000002D			MOV		EDX, 45
 000003A3  89 17			MOV		[EDI], EDX				;move into ASCIIstring

 000003A5				_displayString:
 000003A5  8B 7D 24			MOV		EDI, [EBP + 36]
 000003A8  89 1F			MOV		[EDI], EBX
 000003AA  33 C9			XOR		ECX, ECX
 000003AC  8B CB			MOV		ECX, EBX
					mDisplayString	[EBP + 24], [EBP + 40], ECX  ;stringAddress, revStringAddress, stringLength 
 000003AE  83 F9 01	     1			CMP		ECX, 1
 000003B1  75 0A	     1			JNE		_setup
 000003B3  8B 55 18	     1			MOV    EDX, [EBP + 24]
 000003B6  E8 00000000 E     1			CALL   WriteString
 000003BB  EB 1E	     1			JMP	   _end
 000003BD		     1			_setup:
 000003BD  83 F9 00	     1			CMP	   ECX, 0
 000003C0  74 19	     1			JE	   _end
 000003C2  8B C9	     1			MOV    ECX, ECX
 000003C4  8B 75 18	     1			MOV    ESI, [EBP + 24]
 000003C7  8B 7D 28	     1			MOV    EDI, [EBP + 40]
 000003CA  03 F1	     1			ADD    ESI, ECX
 000003CC  4E		     1			DEC    ESI
 000003CD		     1			_reverseLoop:
 000003CD  FD		     1			STD
 000003CE  AC		     1			LODSB
 000003CF  FC		     1			CLD
 000003D0  AA		     1			STOSB
 000003D1  E2 FA	     1			LOOP   _reverseLoop
 000003D3  8B 55 28	     1			MOV    EDX, [EBP + 40]
 000003D6  E8 00000000 E     1			CALL   WriteString
 000003DB		     1			_end:

 000003DB  5D				POP EBP

					RET	
 000003DC  59		   *	    pop    ecx
 000003DD  5B		   *	    pop    ebx
 000003DE  5A		   *	    pop    edx
 000003DF  58		   *	    pop    eax
 000003E0  C3		   *	    ret    00000h
 000003E1				WriteVal ENDP

				END main

Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/05/21 21:34:43
2String Primitives and Macros    (Proj6_LANDAL.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000025A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003E1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000035F _TEXT	Length= 00000082 Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 00000370 _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000391 _TEXT	
  _displayString . . . . . . . .	L Near	 000003A5 _TEXT	
  _setup . . . . . . . . . . . .	L Near	 000003BD _TEXT	
  _reverseLoop . . . . . . . . .	L Near	 000003CD _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000003DB _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000246 Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 0000003C _TEXT	
  _displayInts . . . . . . . . .	L Near	 00000104 _TEXT	
  _clear . . . . . . . . . . . .	L Near	 00000137 _TEXT	
  _clear2  . . . . . . . . . . .	L Near	 0000014B _TEXT	
  _break . . . . . . . . . . . .	L Near	 00000161 _TEXT	
  _summation . . . . . . . . . .	L Near	 000001B8 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 00000246 _TEXT	Length= 00000119 Public STDCALL
  _setup . . . . . . . . . . . .	L Near	 00000265 _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 00000276 _TEXT	
  _signLength  . . . . . . . . .	L Near	 0000029A _TEXT	
  _validateLoop2 . . . . . . . .	L Near	 000002A4 _TEXT	
  _validateLoop1 . . . . . . . .	L Near	 000002A7 _TEXT	
  _numsOnly  . . . . . . . . . .	L Near	 000002B6 _TEXT	
  _checknum  . . . . . . . . . .	L Near	 000002CA _TEXT	
  _loopNumsOnly  . . . . . . . .	L Near	 000002D2 _TEXT	
  _convert2  . . . . . . . . . .	L Near	 000002D7 _TEXT	
  _convert . . . . . . . . . . .	L Near	 000002E5 _TEXT	
  _convertLoop . . . . . . . . .	L Near	 00000301 _TEXT	
  _skipSign  . . . . . . . . . .	L Near	 0000030A _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000030C _TEXT	
  _validateNeg . . . . . . . . .	L Near	 00000316 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 00000332 _TEXT	
  _exit2 . . . . . . . . . . . .	L Near	 00000347 _TEXT	
  _errorExit . . . . . . . . . .	L Near	 00000359 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYELEMENTS  . . . . . . . . .	Number	 0000000Ah   
ASCIIstring  . . . . . . . . . .	Byte	 000001E2 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXASCII . . . . . . . . . . . .	Number	 00000039h   
MAXBYTES . . . . . . . . . . . .	Number	 0000000Ch   
MAXVAL . . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 0000023E _DATA	
average  . . . . . . . . . . . .	DWord	 00000246 _DATA	
avgString  . . . . . . . . . . .	Byte	 000001AD _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boolie . . . . . . . . . . . . .	DWord	 00000256 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 0000024E _DATA	
comma  . . . . . . . . . . . . .	Byte	 00000213 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayList  . . . . . . . . . .	Byte	 00000178 _DATA	
ec1  . . . . . . . . . . . . . .	Byte	 00000113 _DATA	
emptyString  . . . . . . . . . .	Byte	 000001EE _DATA	
error  . . . . . . . . . . . . .	Byte	 000000C4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 000001C8 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruction  . . . . . . . . . .	Byte	 0000004C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxValue . . . . . . . . . . . .	Byte	 00000206 _DATA	
numArray . . . . . . . . . . . .	DWord	 00000216 _DATA	
numCount . . . . . . . . . . . .	DWord	 00000252 _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
programmer . . . . . . . . . . .	Byte	 00000033 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000AC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revString  . . . . . . . . . . .	Byte	 000001FA _DATA	
space  . . . . . . . . . . . . .	Byte	 00000211 _DATA	
storedDec  . . . . . . . . . . .	DWord	 0000024A _DATA	
sumString  . . . . . . . . . . .	Byte	 0000019E _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000242 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
