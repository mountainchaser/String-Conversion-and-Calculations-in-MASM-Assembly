Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/03/21 15:17:40
2String Primitives and Macros    (Proj6_LANDAL.asm	     Page 1 - 1


				TITLE String Primitives and Macros    (Proj6_LANDAL.asm)

				; Author: Allison Land
				; Last Modified: 11/29/21
				; OSU email address: LANDAL@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 12/4/21
				; Description: This program uses macros to take decimal number inputs as strings, and then converts them to 
				;		decimal numbers....
				;-----------------------------------------------------------------------------------------------------

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; MACRO DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			mGetString
				; 
				; Desc:			Gets a string from the user and validates that it contains a valid integer that will 
				;				fit in a 32 bit register (11 characters total, including sign +/-)
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: progTitle (reference), programmer (reference), ec1 (reference), ec2 (reference),
				;			progDesc(reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

					mGetString		MACRO	stringAddress, bytesReadAddress, promptAddress

						;prompt user for string input, store using ReadString
						MOV		EDX, promptAddress
						CALL	WriteString

						MOV		EDX, stringAddress
						MOV		ECX, MAXBYTES
						CALL	ReadString
						MOV		[bytesReadAddress], EAX

					ENDM

					
				; ---------------------------------------------------------------------------------------------------
				; Name:			mDisplayString
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: progTitle (reference), programmer (reference), ec1 (reference), ec2 (reference),
				;			progDesc(reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

					mDisplayString	MACRO	stringAddress
						;print stored string using WriteString
						MOV		EDX, stringAddress
						CALL	WriteString
					ENDM

				;-----------------------------------------------------------------------------------------------------
					
					;CONSTANTS
 = 7FFFFFFF				MAXVAL = 2147483647  ;negated  and incremented in code
 = 00000039				MAXASCII = 57
 = 0000000C				MAXBYTES = 12
 = 0000000A				ARRAYELEMENTS = 10

 00000000			.data

 00000000 09 09 09 53 74		progTitle	BYTE	"			String Primitives and Macros in MASM Assembly",13,10,0
	   72 69 6E 67 20
	   50 72 69 6D 69
	   74 69 76 65 73
	   20 61 6E 64 20
	   4D 61 63 72 6F
	   73 20 69 6E 20
	   4D 41 53 4D 20
	   41 73 73 65 6D
	   62 6C 79 0D 0A
	   00
 00000033 09 09 09 09 09		programmer	BYTE	"					by Allison Land",13,10,13,10,0
	   62 79 20 41 6C
	   6C 69 73 6F 6E
	   20 4C 61 6E 64
	   0D 0A 0D 0A 00
 0000004C 54 68 69 73 20		instruction	BYTE	"This program requires that you enter ten integers between -2,147,483,648 and 2,147,483,647.",13,10,13,10,0
	   70 72 6F 67 72
	   61 6D 20 72 65
	   71 75 69 72 65
	   73 20 74 68 61
	   74 20 79 6F 75
	   20 65 6E 74 65
	   72 20 74 65 6E
	   20 69 6E 74 65
	   67 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 2D 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 38 20 61 6E
	   64 20 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   2E 0D 0A 0D 0A
	   00
 000000AC 50 6C 65 61 73		prompt		BYTE	"Please enter a number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000000C4 45 52 52 4F 52		error		BYTE	"ERROR: This is either not a valid number, or your integer has too many digits.",0
	   3A 20 54 68 69
	   73 20 69 73 20
	   65 69 74 68 65
	   72 20 6E 6F 74
	   20 61 20 76 61
	   6C 69 64 20 6E
	   75 6D 62 65 72
	   2C 20 6F 72 20
	   79 6F 75 72 20
	   69 6E 74 65 67
	   65 72 20 68 61
	   73 20 74 6F 6F
	   20 6D 61 6E 79
	   20 64 69 67 69
	   74 73 2E 00
 00000113 2A 2A 45 43 3A		ec1			BYTE	"**EC: Numbers each line of user input with running total of user's valid numbers using WriteVal.",13,10,13,10,0
	   20 4E 75 6D 62
	   65 72 73 20 65
	   61 63 68 20 6C
	   69 6E 65 20 6F
	   66 20 75 73 65
	   72 20 69 6E 70
	   75 74 20 77 69
	   74 68 20 72 75
	   6E 6E 69 6E 67
	   20 74 6F 74 61
	   6C 20 6F 66 20
	   75 73 65 72 27
	   73 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   20 75 73 69 6E
	   67 20 57 72 69
	   74 65 56 61 6C
	   2E 0D 0A 0D 0A
	   00
 00000178  0000000C [			ASCIIstring	BYTE	MAXBYTES DUP(?)
	    00
	   ]
 00000184  0000000C [			emptyString	BYTE	MAXBYTES DUP(?)
	    00
	   ]
 00000190 32 31 34 37 34		maxValue	BYTE	"2147483648",0
	   38 33 36 34 38
	   00
 0000019B  0000000A [			numArray	SDWORD	ARRAYELEMENTS DUP(?)
	    00000000
	   ]
 000001C3 00000001			arrayCount	SDWORD	1				
 000001C7 20 00				space		BYTE	" ",0
 000001C9 2C 20 00			comma		BYTE	", ",0
 000001CC 00000000			storedDec	SDWORD	?
 000001D0 00000000			bytesRead	SDWORD	?
 000001D4 00000000			numCount	SDWORD	0
 000001D8 00000000			boolie		SDWORD	0				; 0 = TRUE 1 = FALSE


 00000000			.code
 00000000			main PROC

					;INTRODUCTION
 00000000  BA 00000000 R		MOV		EDX, OFFSET progTitle
 00000005  E8 00000000 E		CALL	WriteString
 0000000A  BA 00000033 R		MOV		EDX, OFFSET programmer
 0000000F  E8 00000000 E		CALL	Writestring
 00000014  BA 00000113 R		MOV		EDX, OFFSET ec1
 00000019  E8 00000000 E		CALL	WriteString
 0000001E  BA 0000004C R		MOV		EDX, OFFSET instruction
 00000023  E8 00000000 E		CALL	WriteString

					;GET 10 VALID INTEGERS FROM USER
					;set up:
 00000028  BF 000001CC R		MOV		EDI, OFFSET storedDec
 0000002D  BE 0000019B R		MOV		ESI, OFFSET numArray
 00000032  B9 0000000A			MOV		ECX, ARRAYELEMENTS
 00000037  BB 00000000			MOV		EBX, 0

 0000003C				_loop:
					;EXTRA CREDIT 1
 0000003C  68 000001C3 R		PUSH	OFFSET arrayCount
 00000041  68 00000178 R		PUSH	OFFSET ASCIIstring
 00000046  E8 000001B7			CALL	WriteVal
 0000004B  BA 000001C7 R		MOV		EDX, OFFSET space
 00000050  E8 00000000 E		CALL	WriteString

 00000055  68 000001D8 R		PUSH	OFFSET boolie
 0000005A  68 00000190 R		PUSH	OFFSET maxValue
 0000005F  68 000000C4 R		PUSH	OFFSET error
 00000064  68 000001CC R		PUSH	OFFSET storedDec
 00000069  68 00000178 R		PUSH	OFFSET ASCIIstring
 0000006E  68 000001D0 R		PUSH	OFFSET bytesRead
 00000073  68 000000AC R		PUSH	OFFSET prompt
 00000078  E8 0000006C			CALL	ReadVal
 0000007D  E8 00000000 E		CALL	CrLF
 00000082  83 3D 000001D8 R		CMP		boolie, 1
	   01
 00000089  75 B1			JNE		_loop
 0000008B  FF 05 000001C3 R		INC		arrayCount
 00000091  C7 05 000001D8 R		MOV		boolie, 0
	   00000000

					;STORE IN ARRAY (using register indirect addressing)
 0000009B  BE 000001CC R		MOV		ESI, OFFSET storedDec	; num going into array
 000000A0  BF 0000019B R		MOV		EDI, OFFSET	numArray
 000000A5  03 FB			ADD		EDI, EBX
 000000A7  89 17			MOV		[EDI], EDX				; move value into array
 000000A9  83 C3 04			ADD		EBX, TYPE numArray				
					
					; clear ASCIIstring
 000000AC  FC				CLD
 000000AD  B9 0000000C			MOV    ECX, MAXBYTES
 000000B2  BE 00000184 R		MOV    ESI, OFFSET emptyString
 000000B7  BF 00000178 R		MOV    EDI, OFFSET ASCIIstring
 000000BC  F3/ A4			REP    MOVSB
 000000BE  83 F9 00			CMP	   ECX, 0
 000000C1  0F 8F FFFFFF75		JG	   _loop					; LOOP x's ARRAYSIZE

					;loop through array, display ints
 000000C7				_displayInts:
 000000C7  B9 0000000A			MOV		ECX, LENGTHOF numArray
 000000CC  BE 0000019B R		MOV		ESI, OFFSET numArray
 000000D1  E8 0000012C			CALL	WriteVal
 000000D6  BA 000001C9 R		MOV		EDX, OFFSET comma
 000000DB  E8 00000000 E		CALL	WriteString
 000000E0  E2 E5			LOOP	_displayInts


					;calculate sum and display

					;calvulate average and display

					Invoke ExitProcess,0	; exit to operating system
 000000E2  6A 00	   *	    push   +000000000h
 000000E4  E8 00000000 E   *	    call   ExitProcess
 000000E9			main ENDP


				; PROCEDURE DEFINITIONS _____________________________________________________________________________
				; ---------------------------------------------------------------------------------------------------
				; Name:			ReadVal
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: OFFSET error, OFFSET storedDec, OFFSET ASCIIstring, OFFSET bytesRead, OFFSET prompt}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------

 000000E9				readVal PROC	USES ECX EBX ESI EDI

					;invoke mGetString
 000000E9  51		   *	    push   ecx
 000000EA  53		   *	    push   ebx
 000000EB  56		   *	    push   esi
 000000EC  57		   *	    push   edi
 000000ED  55				PUSH	EBP
 000000EE  8B EC			MOV		EBP, ESP
					mGetString		[EBP + 32], [EBP + 28], [EBP + 24]  ;stringAddress, bytesReadAddress, promptAddress
 000000F0  8B 55 18	     1			MOV		EDX, [EBP + 24]
 000000F3  E8 00000000 E     1			CALL	WriteString
 000000F8  8B 55 20	     1			MOV		EDX, [EBP + 32]
 000000FB  B9 0000000C	     1			MOV		ECX, MAXBYTES
 00000100  E8 00000000 E     1			CALL	ReadString
 00000105  89 45 1C	     1			MOV		[[EBP + 28]], EAX

					; string primitive setup
 00000108				_setup:
 00000108  FC				CLD
 00000109  8B 55 1C			MOV		EDX, [EBP + 28]
 0000010C  8B CA			MOV		ECX, EDX				; bytesread
 0000010E  8B 75 20			MOV		ESI, [EBP + 32]			; input array ASCIIstring (from mGetString)
 00000111  BF 00000000			MOV		EDI, 0					; for conversion algorithim
 00000116  8B 55 2C			MOV		EDX, [EBP + 44]			; track iteration through maxvalue chars

					;CHECK FOR SIGNS
 00000119				_stringLoop:
 00000119  33 C0			XOR		EAX, EAX
 0000011B  AC				LODSB	
 0000011C  3C 2D			CMP		AL, 45			; -
 0000011E  0F 84 00000089		JE		_skipSign
 00000124  3C 2B			CMP		AL, 43			; +
 00000126  0F 84 00000081		JE		_skipSign
 0000012C  3B 4D 1C			CMP		ECX, [EBP + 28]
 0000012F  75 28			JNE		_numsOnly

					;VALIDATE LENGTH FIRST ITERATION
 00000131  83 F9 0A			CMP		ECX, LENGTHOF MAXVALUE-1	; if more chars than maxvalue (no sign)
 00000134  7F 79			JG		_error
 00000136  83 F9 0A			CMP		ECX, LENGTHOF MAXVALUE-1
 00000139  74 0F			JE		_validateLoop1
 0000013B  EB 1C			JMP		_numsOnly

 0000013D				_signLength:
 0000013D  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE
 00000140  7F 6D			JG		_error	
 00000142  83 F9 0B			CMP		ECX, LENGTHOF MAXVALUE 
 00000145  7C 12			JL		_numsOnly

 00000147				_validateLoop2:					; if same length as max value, check if value is greater than maxvalue
 00000147  33 C0			XOR		EAX, EAX
 00000149  AC				LODSB
 0000014A				_validateLoop1:
 0000014A  8B 55 1C			MOV		EDX, [EBP+28]			;bytes read/ counter
 0000014D  2B D1			SUB		EDX, ECX
 0000014F  3A 82 00000190 R		CMP		AL, maxValue[EDX]		
 00000155  7F 58			JG		_error
 00000157  E2 EE			LOOP	_validateLoop2

 00000159				_numsOnly:
 00000159  FC				CLD								; check for invalid chars
 0000015A  8B 55 1C			MOV		EDX, [EBP + 28]
 0000015D  8B CA			MOV		ECX, EDX
 0000015F  8B 75 20			MOV		ESI, [EBP + 32]			; input array ASCIIstring (from mGetString)
 00000162  33 C0			XOR		EAX, EAX
 00000164  AC				LODSB	
 00000165  3C 2D			CMP		AL, 45			; -
 00000167  74 0C			JE		_loopNumsOnly
 00000169  3C 2B			CMP		AL, 43			; +	
 0000016B  74 08			JE		_loopNumsOnly
 0000016D				_checknum:
 0000016D  3C 30			CMP		AL, 48
 0000016F  7C 3E			JL		_error
 00000171  3C 39			CMP		AL, 57
 00000173  7F 3A			JG		_error
 00000175				_loopNumsOnly:
 00000175  33 C0			XOR		EAX, EAX
 00000177  AC				LODSB
 00000178  E2 F3			LOOP	_checkNum
					
 0000017A				_convert2:                      ;setup conversion
 0000017A  FC				CLD
 0000017B  8B 55 1C			MOV		EDX, [EBP + 28]
 0000017E  8B CA			MOV		ECX, EDX				; bytesread
 00000180  8B 75 20			MOV		ESI, [EBP + 32]			; input array ASCIIstring (from mGetString)
 00000183  BF 00000000			MOV		EDI, 0					; for conversion algorithim

 00000188				_convert:
 00000188  33 C0			XOR		EAX, EAX
 0000018A  AC				LODSB
 0000018B  3C 2D			CMP		AL, 45
 0000018D  74 15			JE		_convertLoop
 0000018F  3C 2B			CMP		AL, 43
 00000191  74 11			JE		_convertLoop
 00000193  83 E8 30			SUB		EAX, 48							;convert ASCII to SDWORD
 00000196  6B FF 0A			IMUL	EDI, 10
 00000199  03 C7			ADD		EAX, EDI
 0000019B  8B F8			MOV		EDI, EAX
 0000019D  83 FF 00			CMP		EDI, 0
 000001A0  7D 02			JGE		_convertLoop
 000001A2  F7 DF			NEG		EDI

 000001A4				_convertLoop:
 000001A4  E2 E2			LOOP	_convert
 000001A6  8B 45 24			MOV		EAX, [EBP+36]
 000001A9  89 38			MOV		[EAX], EDI
 000001AB  EB 0C			JMP		_validateNeg

 000001AD				_skipSign:
 000001AD  EB 8E			JMP		_signLength ; jump

 000001AF				_error:
 000001AF  8B 55 28			MOV		EDX, [EBP + 40]    
 000001B2  E8 00000000 E		CALL	WriteString
 000001B7  EB 43			JMP		_errorExit

					; NEGATE IF NEGATIVE
 000001B9				_validateNeg:
 000001B9  B9 00000001			MOV		ECX, 1	
 000001BE  8B 75 20			MOV		ESI, [EBP + 32]     ;input array ASCIIstring (from mGetString)
 000001C1  AC				LODSB
 000001C2  3C 2D			CMP		AL, 45				;check if first char is -
 000001C4  75 0F			JNE		_exit
 000001C6  F7 DF			NEG		EDI
 000001C8  8B 45 24			MOV		EAX, [EBP+36]
 000001CB  81 FF 80000000		CMP		EDI, -MAXVAL-1
 000001D1  7C DC			JL		_error
 000001D3  89 38			MOV		[EAX], EDI

 000001D5				_exit:
 000001D5  B9 00000001			MOV		ECX, 1	
 000001DA  8B 75 20			MOV		ESI, [EBP + 32]     ;input array ASCIIstring (from mGetString)
 000001DD  AC				LODSB
 000001DE  3C 2D			CMP		AL, 45
 000001E0  75 08			JNE		_exit2
 000001E2  81 FF 7FFFFFFF		CMP		EDI, MAXVAL
 000001E8  7F C5			JG		_error

 000001EA				_exit2:
 000001EA  33 C9			XOR		ECX, ECX
 000001EC  8B 55 30			MOV		EDX, [EBP + 48]
 000001EF  B9 00000001			MOV		ECX, 1
 000001F4  89 0A			MOV		[EDX], ECX			; boolie return TRUE (1) 
 000001F6  89 7D 24			MOV		[EBP + 36], EDI		; output storedDec
 000001F9  89 55 2A			MOV		[EBP + 42], EDX
 000001FC				_errorExit:
 000001FC  5D				POP EBP
					RET 
 000001FD  5F		   *	    pop    edi
 000001FE  5E		   *	    pop    esi
 000001FF  5B		   *	    pop    ebx
 00000200  59		   *	    pop    ecx
 00000201  C3		   *	    ret    00000h
 00000202				ReadVal ENDP

				; ---------------------------------------------------------------------------------------------------
				; Name:			WriteVal
				; 
				; Desc:			
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: {parameters: string (reference)}
				;
				; Returns: None
				; ---------------------------------------------------------------------------------------------------
					
 00000202				WriteVal PROC USES EAX EDX EBX ECX

 00000202  50		   *	    push   eax
 00000203  52		   *	    push   edx
 00000204  53		   *	    push   ebx
 00000205  51		   *	    push   ecx
 00000206  55				PUSH	EBP
 00000207  8B EC			MOV		EBP, ESP

 00000209  BB 00000000			MOV		EBX, 0			;initialize digit count

					;convert SDWORD to ASCII
 0000020E				_loop:
 0000020E  8B 75 1C			MOV		ESI, [EBP + 28]			;move val SDWORD into EDX
 00000211  8B 3E			MOV		EDI, [ESI]
 00000213  8B D7			MOV		EDX, EDI
					
 00000215  99				CDQ
 00000216  B9 0000000A			MOV		ECX, 10
 0000021B  F7 F9			IDIV	ECX
 0000021D  B9 00000000			MOV		ECX, 0
 00000222  83 C2 30			ADD		EDX, 48					;else add 48 to remainder to convert to ASCII
 00000225  8B 4C 1D 18			MOV		ECX, [EBP + 24 + EBX]
 00000229  89 11			MOV		[ECX], EDX				;move into ASCIIstring
 0000022B  41				INC		ECX	
 0000022C  83 F8 00			CMP		EAX, 0					;if quotient is 0, then last digit
 0000022F  7E 02			JLE		_displayString
 00000231  EB DB			JMP		_loop
									

 00000233				_lastDigit:
					;CMP		EDX, 0
					;JL		_negative
					;JMP		_displayString

					;_negative:
					;NEG		EDX
					;ADD		EDX, 48
					;MOV		[EBP + 8 + EBX], EDX
					;INC		EBX
					;MOV		[EBP + 8 + EBX], 45

					;invoke mDisplayString
 00000233				_displayString:
					mDisplayString	[EBP+24]
 00000233  8B 55 18	     1			MOV		EDX, [EBP+24]
 00000236  E8 00000000 E     1			CALL	WriteString

 0000023B  5D				POP EBP

					RET
 0000023C  59		   *	    pop    ecx
 0000023D  5B		   *	    pop    ebx
 0000023E  5A		   *	    pop    edx
 0000023F  58		   *	    pop    eax
 00000240  C3		   *	    ret    00000h
 00000241				WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/03/21 15:17:40
2String Primitives and Macros    (Proj6_LANDAL.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001DC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000241 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000202 _TEXT	Length= 0000003F Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 0000020E _TEXT	
  _lastDigit . . . . . . . . . .	L Near	 00000233 _TEXT	
  _displayString . . . . . . . .	L Near	 00000233 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E9 Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 0000003C _TEXT	
  _displayInts . . . . . . . . .	L Near	 000000C7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000E9 _TEXT	Length= 00000119 Public STDCALL
  _setup . . . . . . . . . . . .	L Near	 00000108 _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 00000119 _TEXT	
  _signLength  . . . . . . . . .	L Near	 0000013D _TEXT	
  _validateLoop2 . . . . . . . .	L Near	 00000147 _TEXT	
  _validateLoop1 . . . . . . . .	L Near	 0000014A _TEXT	
  _numsOnly  . . . . . . . . . .	L Near	 00000159 _TEXT	
  _checknum  . . . . . . . . . .	L Near	 0000016D _TEXT	
  _loopNumsOnly  . . . . . . . .	L Near	 00000175 _TEXT	
  _convert2  . . . . . . . . . .	L Near	 0000017A _TEXT	
  _convert . . . . . . . . . . .	L Near	 00000188 _TEXT	
  _convertLoop . . . . . . . . .	L Near	 000001A4 _TEXT	
  _skipSign  . . . . . . . . . .	L Near	 000001AD _TEXT	
  _error . . . . . . . . . . . .	L Near	 000001AF _TEXT	
  _validateNeg . . . . . . . . .	L Near	 000001B9 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 000001D5 _TEXT	
  _exit2 . . . . . . . . . . . .	L Near	 000001EA _TEXT	
  _errorExit . . . . . . . . . .	L Near	 000001FC _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYELEMENTS  . . . . . . . . .	Number	 0000000Ah   
ASCIIstring  . . . . . . . . . .	Byte	 00000178 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXASCII . . . . . . . . . . . .	Number	 00000039h   
MAXBYTES . . . . . . . . . . . .	Number	 0000000Ch   
MAXVAL . . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 000001C3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boolie . . . . . . . . . . . . .	DWord	 000001D8 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000001D0 _DATA	
comma  . . . . . . . . . . . . .	Byte	 000001C9 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec1  . . . . . . . . . . . . . .	Byte	 00000113 _DATA	
emptyString  . . . . . . . . . .	Byte	 00000184 _DATA	
error  . . . . . . . . . . . . .	Byte	 000000C4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruction  . . . . . . . . . .	Byte	 0000004C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxValue . . . . . . . . . . . .	Byte	 00000190 _DATA	
numArray . . . . . . . . . . . .	DWord	 0000019B _DATA	
numCount . . . . . . . . . . . .	DWord	 000001D4 _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
programmer . . . . . . . . . . .	Byte	 00000033 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000AC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000001C7 _DATA	
storedDec  . . . . . . . . . . .	DWord	 000001CC _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
